/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.5 contented-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the CreateCertificateBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCertificateBody{}

// CreateCertificateBody Request object to create a new certificate.
type CreateCertificateBody struct {
	GatewayId *string `json:"gatewayId,omitempty"`
	DeviceId *string `json:"deviceId,omitempty"`
}

// NewCreateCertificateBody instantiates a new CreateCertificateBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCertificateBody() *CreateCertificateBody {
	this := CreateCertificateBody{}
	return &this
}

// NewCreateCertificateBodyWithDefaults instantiates a new CreateCertificateBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCertificateBodyWithDefaults() *CreateCertificateBody {
	this := CreateCertificateBody{}
	return &this
}

// GetGatewayId returns the GatewayId field value if set, zero value otherwise.
func (o *CreateCertificateBody) GetGatewayId() string {
	if o == nil || IsNil(o.GatewayId) {
		var ret string
		return ret
	}
	return *o.GatewayId
}

// GetGatewayIdOk returns a tuple with the GatewayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCertificateBody) GetGatewayIdOk() (*string, bool) {
	if o == nil || IsNil(o.GatewayId) {
		return nil, false
	}
	return o.GatewayId, true
}

// HasGatewayId returns a boolean if a field has been set.
func (o *CreateCertificateBody) HasGatewayId() bool {
	if o != nil && !IsNil(o.GatewayId) {
		return true
	}

	return false
}

// SetGatewayId gets a reference to the given string and assigns it to the GatewayId field.
func (o *CreateCertificateBody) SetGatewayId(v string) {
	o.GatewayId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *CreateCertificateBody) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCertificateBody) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *CreateCertificateBody) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *CreateCertificateBody) SetDeviceId(v string) {
	o.DeviceId = &v
}

func (o CreateCertificateBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCertificateBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GatewayId) {
		toSerialize["gatewayId"] = o.GatewayId
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	return toSerialize, nil
}

type NullableCreateCertificateBody struct {
	value *CreateCertificateBody
	isSet bool
}

func (v NullableCreateCertificateBody) Get() *CreateCertificateBody {
	return v.value
}

func (v *NullableCreateCertificateBody) Set(val *CreateCertificateBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCertificateBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCertificateBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCertificateBody(val *CreateCertificateBody) *NullableCreateCertificateBody {
	return &NullableCreateCertificateBody{value: val, isSet: true}
}

func (v NullableCreateCertificateBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCertificateBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


