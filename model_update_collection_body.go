/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.2 subversive-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the UpdateCollectionBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCollectionBody{}

// UpdateCollectionBody Request object when updating a collection
type UpdateCollectionBody struct {
	// The team ID that owns the collection. This field is required. When you create new collections the default is to use your private team ID.
	TeamId *string `json:"teamId,omitempty"`
	Firmware *CollectionFirmware `json:"firmware,omitempty"`
	// Tags for the collection. Tags are metadata fields that you can assign to the collection.
	Tags *map[string]string `json:"tags,omitempty"`
	// Enabled flag for the collection. A collection may be disabled or enabled to save time.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewUpdateCollectionBody instantiates a new UpdateCollectionBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCollectionBody() *UpdateCollectionBody {
	this := UpdateCollectionBody{}
	return &this
}

// NewUpdateCollectionBodyWithDefaults instantiates a new UpdateCollectionBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCollectionBodyWithDefaults() *UpdateCollectionBody {
	this := UpdateCollectionBody{}
	return &this
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *UpdateCollectionBody) GetTeamId() string {
	if o == nil || IsNil(o.TeamId) {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCollectionBody) GetTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *UpdateCollectionBody) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *UpdateCollectionBody) SetTeamId(v string) {
	o.TeamId = &v
}

// GetFirmware returns the Firmware field value if set, zero value otherwise.
func (o *UpdateCollectionBody) GetFirmware() CollectionFirmware {
	if o == nil || IsNil(o.Firmware) {
		var ret CollectionFirmware
		return ret
	}
	return *o.Firmware
}

// GetFirmwareOk returns a tuple with the Firmware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCollectionBody) GetFirmwareOk() (*CollectionFirmware, bool) {
	if o == nil || IsNil(o.Firmware) {
		return nil, false
	}
	return o.Firmware, true
}

// HasFirmware returns a boolean if a field has been set.
func (o *UpdateCollectionBody) HasFirmware() bool {
	if o != nil && !IsNil(o.Firmware) {
		return true
	}

	return false
}

// SetFirmware gets a reference to the given CollectionFirmware and assigns it to the Firmware field.
func (o *UpdateCollectionBody) SetFirmware(v CollectionFirmware) {
	o.Firmware = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateCollectionBody) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCollectionBody) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateCollectionBody) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *UpdateCollectionBody) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateCollectionBody) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCollectionBody) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateCollectionBody) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateCollectionBody) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o UpdateCollectionBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCollectionBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TeamId) {
		toSerialize["teamId"] = o.TeamId
	}
	if !IsNil(o.Firmware) {
		toSerialize["firmware"] = o.Firmware
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableUpdateCollectionBody struct {
	value *UpdateCollectionBody
	isSet bool
}

func (v NullableUpdateCollectionBody) Get() *UpdateCollectionBody {
	return v.value
}

func (v *NullableUpdateCollectionBody) Set(val *UpdateCollectionBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCollectionBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCollectionBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCollectionBody(val *UpdateCollectionBody) *NullableUpdateCollectionBody {
	return &NullableUpdateCollectionBody{value: val, isSet: true}
}

func (v NullableUpdateCollectionBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCollectionBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


