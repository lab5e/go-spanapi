/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.5 contented-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the ImageVersionEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageVersionEntry{}

// ImageVersionEntry The image version log contains all reported versions and firmware images  by a device. The entries in the version log is independent of the image list;  if an image is removed the entry will remain in the version log.
type ImageVersionEntry struct {
	DeviceId *string `json:"deviceId,omitempty"`
	ImageId *string `json:"imageId,omitempty"`
	ImageVersion *string `json:"imageVersion,omitempty"`
	ImageLabel *string `json:"imageLabel,omitempty"`
	Reported *string `json:"reported,omitempty"`
}

// NewImageVersionEntry instantiates a new ImageVersionEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageVersionEntry() *ImageVersionEntry {
	this := ImageVersionEntry{}
	return &this
}

// NewImageVersionEntryWithDefaults instantiates a new ImageVersionEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageVersionEntryWithDefaults() *ImageVersionEntry {
	this := ImageVersionEntry{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *ImageVersionEntry) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageVersionEntry) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *ImageVersionEntry) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *ImageVersionEntry) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *ImageVersionEntry) GetImageId() string {
	if o == nil || IsNil(o.ImageId) {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageVersionEntry) GetImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *ImageVersionEntry) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *ImageVersionEntry) SetImageId(v string) {
	o.ImageId = &v
}

// GetImageVersion returns the ImageVersion field value if set, zero value otherwise.
func (o *ImageVersionEntry) GetImageVersion() string {
	if o == nil || IsNil(o.ImageVersion) {
		var ret string
		return ret
	}
	return *o.ImageVersion
}

// GetImageVersionOk returns a tuple with the ImageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageVersionEntry) GetImageVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ImageVersion) {
		return nil, false
	}
	return o.ImageVersion, true
}

// HasImageVersion returns a boolean if a field has been set.
func (o *ImageVersionEntry) HasImageVersion() bool {
	if o != nil && !IsNil(o.ImageVersion) {
		return true
	}

	return false
}

// SetImageVersion gets a reference to the given string and assigns it to the ImageVersion field.
func (o *ImageVersionEntry) SetImageVersion(v string) {
	o.ImageVersion = &v
}

// GetImageLabel returns the ImageLabel field value if set, zero value otherwise.
func (o *ImageVersionEntry) GetImageLabel() string {
	if o == nil || IsNil(o.ImageLabel) {
		var ret string
		return ret
	}
	return *o.ImageLabel
}

// GetImageLabelOk returns a tuple with the ImageLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageVersionEntry) GetImageLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ImageLabel) {
		return nil, false
	}
	return o.ImageLabel, true
}

// HasImageLabel returns a boolean if a field has been set.
func (o *ImageVersionEntry) HasImageLabel() bool {
	if o != nil && !IsNil(o.ImageLabel) {
		return true
	}

	return false
}

// SetImageLabel gets a reference to the given string and assigns it to the ImageLabel field.
func (o *ImageVersionEntry) SetImageLabel(v string) {
	o.ImageLabel = &v
}

// GetReported returns the Reported field value if set, zero value otherwise.
func (o *ImageVersionEntry) GetReported() string {
	if o == nil || IsNil(o.Reported) {
		var ret string
		return ret
	}
	return *o.Reported
}

// GetReportedOk returns a tuple with the Reported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageVersionEntry) GetReportedOk() (*string, bool) {
	if o == nil || IsNil(o.Reported) {
		return nil, false
	}
	return o.Reported, true
}

// HasReported returns a boolean if a field has been set.
func (o *ImageVersionEntry) HasReported() bool {
	if o != nil && !IsNil(o.Reported) {
		return true
	}

	return false
}

// SetReported gets a reference to the given string and assigns it to the Reported field.
func (o *ImageVersionEntry) SetReported(v string) {
	o.Reported = &v
}

func (o ImageVersionEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageVersionEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.ImageId) {
		toSerialize["imageId"] = o.ImageId
	}
	if !IsNil(o.ImageVersion) {
		toSerialize["imageVersion"] = o.ImageVersion
	}
	if !IsNil(o.ImageLabel) {
		toSerialize["imageLabel"] = o.ImageLabel
	}
	if !IsNil(o.Reported) {
		toSerialize["reported"] = o.Reported
	}
	return toSerialize, nil
}

type NullableImageVersionEntry struct {
	value *ImageVersionEntry
	isSet bool
}

func (v NullableImageVersionEntry) Get() *ImageVersionEntry {
	return v.value
}

func (v *NullableImageVersionEntry) Set(val *ImageVersionEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableImageVersionEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableImageVersionEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageVersionEntry(val *ImageVersionEntry) *NullableImageVersionEntry {
	return &NullableImageVersionEntry{value: val, isSet: true}
}

func (v NullableImageVersionEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageVersionEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


