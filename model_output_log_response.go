/*
The Span API

API for device, collection, output and firmware management

API version: 4.9.5 spattered-kelvin
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the OutputLogResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputLogResponse{}

// OutputLogResponse List logs for output
type OutputLogResponse struct {
	Logs []OutputLogEntry `json:"logs,omitempty"`
}

// NewOutputLogResponse instantiates a new OutputLogResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputLogResponse() *OutputLogResponse {
	this := OutputLogResponse{}
	return &this
}

// NewOutputLogResponseWithDefaults instantiates a new OutputLogResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputLogResponseWithDefaults() *OutputLogResponse {
	this := OutputLogResponse{}
	return &this
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *OutputLogResponse) GetLogs() []OutputLogEntry {
	if o == nil || IsNil(o.Logs) {
		var ret []OutputLogEntry
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputLogResponse) GetLogsOk() ([]OutputLogEntry, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *OutputLogResponse) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []OutputLogEntry and assigns it to the Logs field.
func (o *OutputLogResponse) SetLogs(v []OutputLogEntry) {
	o.Logs = v
}

func (o OutputLogResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputLogResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	return toSerialize, nil
}

type NullableOutputLogResponse struct {
	value *OutputLogResponse
	isSet bool
}

func (v NullableOutputLogResponse) Get() *OutputLogResponse {
	return v.value
}

func (v *NullableOutputLogResponse) Set(val *OutputLogResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputLogResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputLogResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputLogResponse(val *OutputLogResponse) *NullableOutputLogResponse {
	return &NullableOutputLogResponse{value: val, isSet: true}
}

func (v NullableOutputLogResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputLogResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


