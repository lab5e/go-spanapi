/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.5 contented-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the DeviceImageState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceImageState{}

// DeviceImageState Image state for a single device
type DeviceImageState struct {
	State []ImageState `json:"state,omitempty"`
}

// NewDeviceImageState instantiates a new DeviceImageState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceImageState() *DeviceImageState {
	this := DeviceImageState{}
	return &this
}

// NewDeviceImageStateWithDefaults instantiates a new DeviceImageState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceImageStateWithDefaults() *DeviceImageState {
	this := DeviceImageState{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DeviceImageState) GetState() []ImageState {
	if o == nil || IsNil(o.State) {
		var ret []ImageState
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceImageState) GetStateOk() ([]ImageState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DeviceImageState) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given []ImageState and assigns it to the State field.
func (o *DeviceImageState) SetState(v []ImageState) {
	o.State = v
}

func (o DeviceImageState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceImageState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableDeviceImageState struct {
	value *DeviceImageState
	isSet bool
}

func (v NullableDeviceImageState) Get() *DeviceImageState {
	return v.value
}

func (v *NullableDeviceImageState) Set(val *DeviceImageState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceImageState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceImageState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceImageState(val *DeviceImageState) *NullableDeviceImageState {
	return &NullableDeviceImageState{value: val, isSet: true}
}

func (v NullableDeviceImageState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceImageState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


