/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.5 contented-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the ListImageStatesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListImageStatesResponse{}

// ListImageStatesResponse Response object when retrieving image states for a collection
type ListImageStatesResponse struct {
	States []DeviceImageState `json:"states,omitempty"`
}

// NewListImageStatesResponse instantiates a new ListImageStatesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListImageStatesResponse() *ListImageStatesResponse {
	this := ListImageStatesResponse{}
	return &this
}

// NewListImageStatesResponseWithDefaults instantiates a new ListImageStatesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListImageStatesResponseWithDefaults() *ListImageStatesResponse {
	this := ListImageStatesResponse{}
	return &this
}

// GetStates returns the States field value if set, zero value otherwise.
func (o *ListImageStatesResponse) GetStates() []DeviceImageState {
	if o == nil || IsNil(o.States) {
		var ret []DeviceImageState
		return ret
	}
	return o.States
}

// GetStatesOk returns a tuple with the States field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImageStatesResponse) GetStatesOk() ([]DeviceImageState, bool) {
	if o == nil || IsNil(o.States) {
		return nil, false
	}
	return o.States, true
}

// HasStates returns a boolean if a field has been set.
func (o *ListImageStatesResponse) HasStates() bool {
	if o != nil && !IsNil(o.States) {
		return true
	}

	return false
}

// SetStates gets a reference to the given []DeviceImageState and assigns it to the States field.
func (o *ListImageStatesResponse) SetStates(v []DeviceImageState) {
	o.States = v
}

func (o ListImageStatesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListImageStatesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.States) {
		toSerialize["states"] = o.States
	}
	return toSerialize, nil
}

type NullableListImageStatesResponse struct {
	value *ListImageStatesResponse
	isSet bool
}

func (v NullableListImageStatesResponse) Get() *ListImageStatesResponse {
	return v.value
}

func (v *NullableListImageStatesResponse) Set(val *ListImageStatesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListImageStatesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListImageStatesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListImageStatesResponse(val *ListImageStatesResponse) *NullableListImageStatesResponse {
	return &NullableListImageStatesResponse{value: val, isSet: true}
}

func (v NullableListImageStatesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListImageStatesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


