/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.5 contented-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the ListImageVersionHistoryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListImageVersionHistoryResponse{}

// ListImageVersionHistoryResponse Response obejct when listing image version log for a device
type ListImageVersionHistoryResponse struct {
	CollectionId *string `json:"collectionId,omitempty"`
	Log []ImageVersionEntry `json:"log,omitempty"`
}

// NewListImageVersionHistoryResponse instantiates a new ListImageVersionHistoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListImageVersionHistoryResponse() *ListImageVersionHistoryResponse {
	this := ListImageVersionHistoryResponse{}
	return &this
}

// NewListImageVersionHistoryResponseWithDefaults instantiates a new ListImageVersionHistoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListImageVersionHistoryResponseWithDefaults() *ListImageVersionHistoryResponse {
	this := ListImageVersionHistoryResponse{}
	return &this
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *ListImageVersionHistoryResponse) GetCollectionId() string {
	if o == nil || IsNil(o.CollectionId) {
		var ret string
		return ret
	}
	return *o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImageVersionHistoryResponse) GetCollectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionId) {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *ListImageVersionHistoryResponse) HasCollectionId() bool {
	if o != nil && !IsNil(o.CollectionId) {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given string and assigns it to the CollectionId field.
func (o *ListImageVersionHistoryResponse) SetCollectionId(v string) {
	o.CollectionId = &v
}

// GetLog returns the Log field value if set, zero value otherwise.
func (o *ListImageVersionHistoryResponse) GetLog() []ImageVersionEntry {
	if o == nil || IsNil(o.Log) {
		var ret []ImageVersionEntry
		return ret
	}
	return o.Log
}

// GetLogOk returns a tuple with the Log field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImageVersionHistoryResponse) GetLogOk() ([]ImageVersionEntry, bool) {
	if o == nil || IsNil(o.Log) {
		return nil, false
	}
	return o.Log, true
}

// HasLog returns a boolean if a field has been set.
func (o *ListImageVersionHistoryResponse) HasLog() bool {
	if o != nil && !IsNil(o.Log) {
		return true
	}

	return false
}

// SetLog gets a reference to the given []ImageVersionEntry and assigns it to the Log field.
func (o *ListImageVersionHistoryResponse) SetLog(v []ImageVersionEntry) {
	o.Log = v
}

func (o ListImageVersionHistoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListImageVersionHistoryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CollectionId) {
		toSerialize["collectionId"] = o.CollectionId
	}
	if !IsNil(o.Log) {
		toSerialize["log"] = o.Log
	}
	return toSerialize, nil
}

type NullableListImageVersionHistoryResponse struct {
	value *ListImageVersionHistoryResponse
	isSet bool
}

func (v NullableListImageVersionHistoryResponse) Get() *ListImageVersionHistoryResponse {
	return v.value
}

func (v *NullableListImageVersionHistoryResponse) Set(val *ListImageVersionHistoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListImageVersionHistoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListImageVersionHistoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListImageVersionHistoryResponse(val *ListImageVersionHistoryResponse) *NullableListImageVersionHistoryResponse {
	return &NullableListImageVersionHistoryResponse{value: val, isSet: true}
}

func (v NullableListImageVersionHistoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListImageVersionHistoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


