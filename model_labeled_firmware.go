/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.5 contented-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the LabeledFirmware type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabeledFirmware{}

// LabeledFirmware A firmware image that is tagged with a label.
type LabeledFirmware struct {
	CollectionId *string `json:"collectionId,omitempty"`
	ImageId *string `json:"imageId,omitempty"`
	ImageRef *string `json:"imageRef,omitempty"`
	Version *string `json:"version,omitempty"`
	Label *string `json:"label,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	Length *string `json:"length,omitempty"`
	Sha256 *string `json:"sha256,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
}

// NewLabeledFirmware instantiates a new LabeledFirmware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabeledFirmware() *LabeledFirmware {
	this := LabeledFirmware{}
	return &this
}

// NewLabeledFirmwareWithDefaults instantiates a new LabeledFirmware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabeledFirmwareWithDefaults() *LabeledFirmware {
	this := LabeledFirmware{}
	return &this
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *LabeledFirmware) GetCollectionId() string {
	if o == nil || IsNil(o.CollectionId) {
		var ret string
		return ret
	}
	return *o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetCollectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionId) {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *LabeledFirmware) HasCollectionId() bool {
	if o != nil && !IsNil(o.CollectionId) {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given string and assigns it to the CollectionId field.
func (o *LabeledFirmware) SetCollectionId(v string) {
	o.CollectionId = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *LabeledFirmware) GetImageId() string {
	if o == nil || IsNil(o.ImageId) {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *LabeledFirmware) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *LabeledFirmware) SetImageId(v string) {
	o.ImageId = &v
}

// GetImageRef returns the ImageRef field value if set, zero value otherwise.
func (o *LabeledFirmware) GetImageRef() string {
	if o == nil || IsNil(o.ImageRef) {
		var ret string
		return ret
	}
	return *o.ImageRef
}

// GetImageRefOk returns a tuple with the ImageRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetImageRefOk() (*string, bool) {
	if o == nil || IsNil(o.ImageRef) {
		return nil, false
	}
	return o.ImageRef, true
}

// HasImageRef returns a boolean if a field has been set.
func (o *LabeledFirmware) HasImageRef() bool {
	if o != nil && !IsNil(o.ImageRef) {
		return true
	}

	return false
}

// SetImageRef gets a reference to the given string and assigns it to the ImageRef field.
func (o *LabeledFirmware) SetImageRef(v string) {
	o.ImageRef = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *LabeledFirmware) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *LabeledFirmware) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *LabeledFirmware) SetVersion(v string) {
	o.Version = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *LabeledFirmware) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *LabeledFirmware) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *LabeledFirmware) SetLabel(v string) {
	o.Label = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *LabeledFirmware) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *LabeledFirmware) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *LabeledFirmware) SetFileName(v string) {
	o.FileName = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *LabeledFirmware) GetLength() string {
	if o == nil || IsNil(o.Length) {
		var ret string
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetLengthOk() (*string, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *LabeledFirmware) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given string and assigns it to the Length field.
func (o *LabeledFirmware) SetLength(v string) {
	o.Length = &v
}

// GetSha256 returns the Sha256 field value if set, zero value otherwise.
func (o *LabeledFirmware) GetSha256() string {
	if o == nil || IsNil(o.Sha256) {
		var ret string
		return ret
	}
	return *o.Sha256
}

// GetSha256Ok returns a tuple with the Sha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetSha256Ok() (*string, bool) {
	if o == nil || IsNil(o.Sha256) {
		return nil, false
	}
	return o.Sha256, true
}

// HasSha256 returns a boolean if a field has been set.
func (o *LabeledFirmware) HasSha256() bool {
	if o != nil && !IsNil(o.Sha256) {
		return true
	}

	return false
}

// SetSha256 gets a reference to the given string and assigns it to the Sha256 field.
func (o *LabeledFirmware) SetSha256(v string) {
	o.Sha256 = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LabeledFirmware) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabeledFirmware) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LabeledFirmware) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *LabeledFirmware) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o LabeledFirmware) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabeledFirmware) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CollectionId) {
		toSerialize["collectionId"] = o.CollectionId
	}
	if !IsNil(o.ImageId) {
		toSerialize["imageId"] = o.ImageId
	}
	if !IsNil(o.ImageRef) {
		toSerialize["imageRef"] = o.ImageRef
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Sha256) {
		toSerialize["sha256"] = o.Sha256
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableLabeledFirmware struct {
	value *LabeledFirmware
	isSet bool
}

func (v NullableLabeledFirmware) Get() *LabeledFirmware {
	return v.value
}

func (v *NullableLabeledFirmware) Set(val *LabeledFirmware) {
	v.value = val
	v.isSet = true
}

func (v NullableLabeledFirmware) IsSet() bool {
	return v.isSet
}

func (v *NullableLabeledFirmware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabeledFirmware(val *LabeledFirmware) *NullableLabeledFirmware {
	return &NullableLabeledFirmware{value: val, isSet: true}
}

func (v NullableLabeledFirmware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabeledFirmware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


