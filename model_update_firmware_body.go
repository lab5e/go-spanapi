/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.0 convulsive-launa
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the UpdateFirmwareBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFirmwareBody{}

// UpdateFirmwareBody This is the request object when updating the firmware image
type UpdateFirmwareBody struct {
	CollectionId *string `json:"collectionId,omitempty"`
	Version *string `json:"version,omitempty"`
	Tags *map[string]string `json:"tags,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewUpdateFirmwareBody instantiates a new UpdateFirmwareBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFirmwareBody() *UpdateFirmwareBody {
	this := UpdateFirmwareBody{}
	return &this
}

// NewUpdateFirmwareBodyWithDefaults instantiates a new UpdateFirmwareBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFirmwareBodyWithDefaults() *UpdateFirmwareBody {
	this := UpdateFirmwareBody{}
	return &this
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *UpdateFirmwareBody) GetCollectionId() string {
	if o == nil || IsNil(o.CollectionId) {
		var ret string
		return ret
	}
	return *o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareBody) GetCollectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionId) {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *UpdateFirmwareBody) HasCollectionId() bool {
	if o != nil && !IsNil(o.CollectionId) {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given string and assigns it to the CollectionId field.
func (o *UpdateFirmwareBody) SetCollectionId(v string) {
	o.CollectionId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UpdateFirmwareBody) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareBody) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UpdateFirmwareBody) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *UpdateFirmwareBody) SetVersion(v string) {
	o.Version = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateFirmwareBody) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareBody) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateFirmwareBody) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *UpdateFirmwareBody) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateFirmwareBody) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareBody) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateFirmwareBody) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateFirmwareBody) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o UpdateFirmwareBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFirmwareBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CollectionId) {
		toSerialize["collectionId"] = o.CollectionId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableUpdateFirmwareBody struct {
	value *UpdateFirmwareBody
	isSet bool
}

func (v NullableUpdateFirmwareBody) Get() *UpdateFirmwareBody {
	return v.value
}

func (v *NullableUpdateFirmwareBody) Set(val *UpdateFirmwareBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFirmwareBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFirmwareBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFirmwareBody(val *UpdateFirmwareBody) *NullableUpdateFirmwareBody {
	return &NullableUpdateFirmwareBody{value: val, isSet: true}
}

func (v NullableUpdateFirmwareBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFirmwareBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


