/*
The Span API

API for device, collection, output and firmware management

API version: 4.8.0 indecipherable-ferman
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the DeviceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceConfig{}

// DeviceConfig This is the configuration for the device via the various gateways.
type DeviceConfig struct {
	Ciot *CellularIoTConfig `json:"ciot,omitempty"`
	// This is the configuration for an internet-connected device. There are currently no configuration options for internet devices; the device is identified via the clientcertificate.  This is empty since there's no configuration required for the internet  gateway
	Inet map[string]interface{} `json:"inet,omitempty"`
	Gateway *map[string]GatewayDeviceConfig `json:"gateway,omitempty"`
}

// NewDeviceConfig instantiates a new DeviceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceConfig() *DeviceConfig {
	this := DeviceConfig{}
	return &this
}

// NewDeviceConfigWithDefaults instantiates a new DeviceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceConfigWithDefaults() *DeviceConfig {
	this := DeviceConfig{}
	return &this
}

// GetCiot returns the Ciot field value if set, zero value otherwise.
func (o *DeviceConfig) GetCiot() CellularIoTConfig {
	if o == nil || IsNil(o.Ciot) {
		var ret CellularIoTConfig
		return ret
	}
	return *o.Ciot
}

// GetCiotOk returns a tuple with the Ciot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfig) GetCiotOk() (*CellularIoTConfig, bool) {
	if o == nil || IsNil(o.Ciot) {
		return nil, false
	}
	return o.Ciot, true
}

// HasCiot returns a boolean if a field has been set.
func (o *DeviceConfig) HasCiot() bool {
	if o != nil && !IsNil(o.Ciot) {
		return true
	}

	return false
}

// SetCiot gets a reference to the given CellularIoTConfig and assigns it to the Ciot field.
func (o *DeviceConfig) SetCiot(v CellularIoTConfig) {
	o.Ciot = &v
}

// GetInet returns the Inet field value if set, zero value otherwise.
func (o *DeviceConfig) GetInet() map[string]interface{} {
	if o == nil || IsNil(o.Inet) {
		var ret map[string]interface{}
		return ret
	}
	return o.Inet
}

// GetInetOk returns a tuple with the Inet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfig) GetInetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Inet) {
		return map[string]interface{}{}, false
	}
	return o.Inet, true
}

// HasInet returns a boolean if a field has been set.
func (o *DeviceConfig) HasInet() bool {
	if o != nil && !IsNil(o.Inet) {
		return true
	}

	return false
}

// SetInet gets a reference to the given map[string]interface{} and assigns it to the Inet field.
func (o *DeviceConfig) SetInet(v map[string]interface{}) {
	o.Inet = v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *DeviceConfig) GetGateway() map[string]GatewayDeviceConfig {
	if o == nil || IsNil(o.Gateway) {
		var ret map[string]GatewayDeviceConfig
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfig) GetGatewayOk() (*map[string]GatewayDeviceConfig, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *DeviceConfig) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given map[string]GatewayDeviceConfig and assigns it to the Gateway field.
func (o *DeviceConfig) SetGateway(v map[string]GatewayDeviceConfig) {
	o.Gateway = &v
}

func (o DeviceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ciot) {
		toSerialize["ciot"] = o.Ciot
	}
	if !IsNil(o.Inet) {
		toSerialize["inet"] = o.Inet
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	return toSerialize, nil
}

type NullableDeviceConfig struct {
	value *DeviceConfig
	isSet bool
}

func (v NullableDeviceConfig) Get() *DeviceConfig {
	return v.value
}

func (v *NullableDeviceConfig) Set(val *DeviceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceConfig(val *DeviceConfig) *NullableDeviceConfig {
	return &NullableDeviceConfig{value: val, isSet: true}
}

func (v NullableDeviceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


