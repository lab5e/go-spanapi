/*
The Span API

API for device, collection, output and firmware management

API version: 5.0.5 contented-jamila
Contact: dev@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// checks if the AssignTargetImageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignTargetImageResponse{}

// AssignTargetImageResponse Response object when assigning an image to a collection or collection/device
type AssignTargetImageResponse struct {
	CollectionId *string `json:"collectionId,omitempty"`
	ImageId *string `json:"imageId,omitempty"`
	DeviceId *string `json:"deviceId,omitempty"`
}

// NewAssignTargetImageResponse instantiates a new AssignTargetImageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignTargetImageResponse() *AssignTargetImageResponse {
	this := AssignTargetImageResponse{}
	return &this
}

// NewAssignTargetImageResponseWithDefaults instantiates a new AssignTargetImageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignTargetImageResponseWithDefaults() *AssignTargetImageResponse {
	this := AssignTargetImageResponse{}
	return &this
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise.
func (o *AssignTargetImageResponse) GetCollectionId() string {
	if o == nil || IsNil(o.CollectionId) {
		var ret string
		return ret
	}
	return *o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignTargetImageResponse) GetCollectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionId) {
		return nil, false
	}
	return o.CollectionId, true
}

// HasCollectionId returns a boolean if a field has been set.
func (o *AssignTargetImageResponse) HasCollectionId() bool {
	if o != nil && !IsNil(o.CollectionId) {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given string and assigns it to the CollectionId field.
func (o *AssignTargetImageResponse) SetCollectionId(v string) {
	o.CollectionId = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *AssignTargetImageResponse) GetImageId() string {
	if o == nil || IsNil(o.ImageId) {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignTargetImageResponse) GetImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *AssignTargetImageResponse) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *AssignTargetImageResponse) SetImageId(v string) {
	o.ImageId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *AssignTargetImageResponse) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignTargetImageResponse) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *AssignTargetImageResponse) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *AssignTargetImageResponse) SetDeviceId(v string) {
	o.DeviceId = &v
}

func (o AssignTargetImageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignTargetImageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CollectionId) {
		toSerialize["collectionId"] = o.CollectionId
	}
	if !IsNil(o.ImageId) {
		toSerialize["imageId"] = o.ImageId
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	return toSerialize, nil
}

type NullableAssignTargetImageResponse struct {
	value *AssignTargetImageResponse
	isSet bool
}

func (v NullableAssignTargetImageResponse) Get() *AssignTargetImageResponse {
	return v.value
}

func (v *NullableAssignTargetImageResponse) Set(val *AssignTargetImageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignTargetImageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignTargetImageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignTargetImageResponse(val *AssignTargetImageResponse) *NullableAssignTargetImageResponse {
	return &NullableAssignTargetImageResponse{value: val, isSet: true}
}

func (v NullableAssignTargetImageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignTargetImageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


