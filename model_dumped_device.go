/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * API version: 4.1.15 disproved-darryl
 * Contact: dev@lab5e.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanapi

import (
	"encoding/json"
)

// DumpedDevice struct for DumpedDevice
type DumpedDevice struct {
	Device *Device `json:"device,omitempty"`
}

// NewDumpedDevice instantiates a new DumpedDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDumpedDevice() *DumpedDevice {
	this := DumpedDevice{}
	return &this
}

// NewDumpedDeviceWithDefaults instantiates a new DumpedDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDumpedDeviceWithDefaults() *DumpedDevice {
	this := DumpedDevice{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DumpedDevice) GetDevice() Device {
	if o == nil || o.Device == nil {
		var ret Device
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DumpedDevice) GetDeviceOk() (*Device, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DumpedDevice) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given Device and assigns it to the Device field.
func (o *DumpedDevice) SetDevice(v Device) {
	o.Device = &v
}

func (o DumpedDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	return json.Marshal(toSerialize)
}

type NullableDumpedDevice struct {
	value *DumpedDevice
	isSet bool
}

func (v NullableDumpedDevice) Get() *DumpedDevice {
	return v.value
}

func (v *NullableDumpedDevice) Set(val *DumpedDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableDumpedDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDumpedDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDumpedDevice(val *DumpedDevice) *NullableDumpedDevice {
	return &NullableDumpedDevice{value: val, isSet: true}
}

func (v NullableDumpedDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDumpedDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
